class Solution {
public:

    vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9};

vector<int> pos;
vector<vector<int>> ans;

int fun(int in, int sum , int step , int n ,int  k)
{
    if (sum == n && step == k)
    {
        ans.push_back(pos);
        return 1;
    }
    if (in == 9)
    {
        if (sum == n && step == k)
        {
            ans.push_back(pos);
            return 1;
        }
        else
            return 0;
    }
    pos.push_back(v[in]);
    int take = fun(in + 1, sum + v[in], step+1 , n , k);
    auto it = pos.end();
    it--;
    pos.erase(it);
    int nottake = fun(in+1 , sum , step , n , k);
    return (take | nottake);
}
    
    vector<vector<int>> combinationSum3(int k, int n) {
        int min_pos = ((k)*(k+1))/2;
        vector<vector<int>> vll;
        if(min_pos > n || n>45)
        return vll;
        vector<int> check;
        int v = fun(0,0,0, n , k); 
        return ans;
        
    }
};
